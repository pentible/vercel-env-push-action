#!/usr/bin/env bash

set -e

declare script_dir
script_dir="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
declare repo_dir
repo_dir="$(dirname "$script_dir")"

# load mise environment (in case we're run from outside the project directory)
eval "$(cd "$repo_dir" && mise hook-env 2> /dev/null)"

dev::usage() {
    echo 'usage: dev <command>'
    echo '       dev initial setup    # install app and dev env dependencies'
    echo '       dev reset            # deletes temp files and sets project back up'
    echo '       dev start            # run dev server'
    echo '       dev lint             # run linters'
    echo '       dev lint fix         # fix auto-fixable linter errors'
    echo '       dev lint dist        # lint dist in sync with source'
    echo '       dev release          # publish the next version'
    exit 1
}

dev::initial::setup() {
    cd "$repo_dir"

    echo '==> install brew'
    if ! type 'brew' > /dev/null 2>&1; then
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi

    echo '==> install dependencies'
    brew install \
        mise \
        shellcheck

    echo '==> allow mise to load project directory'
    mise trust --all

    echo '==> dev reset'
    dev::reset
}

dev::reset() {
    cd "$repo_dir"

    echo '==> delete git ignored files'
    git clean -ffdX

    echo '==> reload mise'
    mise install

    echo '==> install dependencies'
    npm install
}

dev::start() {
    npm run dev
}

dev::lint() {
    check-package-lock
    shellcheck-all
    tsc
    eslint .
    prettier --log-level warn --check .
    dev::lint::dist
}

dev::lint::fix() {
    eslint --fix .
    prettier --log-level warn --write .
    dev::lint::dist
}

dev::lint::dist() {
    npm run --silent build -- --quiet

    if [[ "$(git diff --ignore-space-at-eol --text dist/ | wc -l)" -gt "0" ]]; then
        echo "Detected uncommitted changes after build. See status below:"
        git --no-pager diff --ignore-space-at-eol --text dist/
        exit 1
    fi
}

dev::release() {
    # TODO: update workflow
    # Terminal colors
    OFF='\033[0m'
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    BLUE='\033[0;34m'

    # Get the latest release tag
    latest_tag=$(git describe --tags "$(git rev-list --tags --max-count=1)") || true

    if [[ -z "$latest_tag" ]]; then
        # There are no existing release tags
        echo -e "No tags found (yet) - Continue to create and push your first tag"
        latest_tag="[unknown]"
    fi

    # Display the latest release tag
    echo -e "The latest release tag is: ${BLUE}${latest_tag}${OFF}"

    # Prompt the user for the new release tag
    read -r -p 'Enter a new release tag (vX.X.X format): ' new_tag

    # Validate the new release tag
    tag_regex='v[0-9]+\.[0-9]+\.[0-9]+$'
    if echo "$new_tag" | grep -q -E "$tag_regex"; then
        echo -e "Tag: ${BLUE}$new_tag${OFF} is valid"
    else
        # Release tag is not `vX.X.X` format
        echo -e "Tag: ${BLUE}$new_tag${OFF} is ${RED}not valid${OFF} (must be in vX.X.X format)"
        exit 1
    fi

    # Tag the new release
    git tag -a "$new_tag" -m "$new_tag Release"
    echo -e "${GREEN}Tagged: $new_tag${OFF}"

    # Push the new tag to the remote
    git push --tags
    echo -e "${GREEN}Release tag pushed to remote${OFF}"
    echo -e "${GREEN}Done!${OFF}"
}

case "$*" in
    'initial setup') dev::initial::setup ;;
    reset) dev::reset ;;
    start) dev::start ;;
    lint) dev::lint ;;
    'lint fix') dev::lint::fix ;;
    'lint dist') dev::lint::dist ;;
    release) dev::release ;;
    *) dev::usage ;;
esac
